
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\025\004\000\002\025\003\000" +
    "\002\024\004\000\002\023\007\000\002\023\007\000\002" +
    "\022\005\000\002\005\006\000\002\005\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\021\004" +
    "\000\002\021\003\000\002\020\005\000\002\020\006\000" +
    "\002\020\007\000\002\020\006\000\002\020\005\000\002" +
    "\007\003\000\002\007\005\000\002\011\003\000\002\011" +
    "\005\000\002\010\005\000\002\010\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\006\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\012\004\006\010\ufffe\013\ufffe\014\ufffe\001" +
    "\002\000\010\010\021\013\016\014\017\001\002\000\004" +
    "\002\015\001\002\000\004\030\007\001\002\000\010\023" +
    "\012\024\013\025\011\001\002\000\012\004\006\010\ufffe" +
    "\013\ufffe\014\ufffe\001\002\000\032\004\ufffb\006\ufffb\010" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\001\002\000\032\004\ufffd\006" +
    "\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\001\002\000\032\004" +
    "\ufffc\006\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\001\002\000" +
    "\010\010\uffff\013\uffff\014\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\030\ufff1\001\002\000\004\030\ufff0\001" +
    "\002\000\004\002\001\001\002\000\004\030\ufff2\001\002" +
    "\000\012\002\ufff9\010\021\013\016\014\017\001\002\000" +
    "\004\030\025\001\002\000\012\002\ufff8\010\ufff8\013\ufff8" +
    "\014\ufff8\001\002\000\004\005\026\001\002\000\010\010" +
    "\030\013\016\014\017\001\002\000\006\006\112\012\111" +
    "\001\002\000\006\006\033\030\ufff2\001\002\000\004\030" +
    "\032\001\002\000\006\006\ufff3\012\ufff3\001\002\000\004" +
    "\007\035\001\002\000\012\002\ufff6\010\ufff6\013\ufff6\014" +
    "\ufff6\001\002\000\014\010\021\013\016\014\017\027\040" +
    "\030\036\001\002\000\006\005\100\026\101\001\002\000" +
    "\016\010\021\011\077\013\016\014\017\027\040\030\036" +
    "\001\002\000\014\005\050\023\012\024\013\025\011\030" +
    "\054\001\002\000\016\010\uffee\011\uffee\013\uffee\014\uffee" +
    "\027\uffee\030\uffee\001\002\000\004\030\044\001\002\000" +
    "\006\012\045\015\046\001\002\000\006\012\uffe8\015\uffe8" +
    "\001\002\000\004\030\047\001\002\000\016\010\uffed\011" +
    "\uffed\013\uffed\014\uffed\027\uffed\030\uffed\001\002\000\006" +
    "\012\uffe7\015\uffe7\001\002\000\014\005\050\023\012\024" +
    "\013\025\011\030\054\001\002\000\022\006\uffe3\012\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\001" +
    "\002\000\022\006\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\001\002\000\016\015\073\016" +
    "\063\017\064\020\066\021\061\022\065\001\002\000\024" +
    "\005\055\006\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\001\002\000\016\005\050\006\057" +
    "\023\012\024\013\025\011\030\054\001\002\000\006\006" +
    "\071\012\070\001\002\000\022\006\uffdc\012\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\001\002\000" +
    "\020\006\uffe6\012\uffe6\016\063\017\064\020\066\021\061" +
    "\022\065\001\002\000\014\005\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\030\uffdf\001\002\000\014\005\050\023\012\024\013" +
    "\025\011\030\054\001\002\000\014\005\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\030\uffe2\001\002\000\014\005\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\030\uffe1\001\002\000\014\005\uffde\023" +
    "\uffde\024\uffde\025\uffde\030\uffde\001\002\000\014\005\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\030\uffe0\001\002\000\022\006" +
    "\uffe4\012\uffe4\015\uffe4\016\063\017\064\020\066\021\061" +
    "\022\065\001\002\000\014\005\050\023\012\024\013\025" +
    "\011\030\054\001\002\000\022\006\uffdd\012\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\001\002\000" +
    "\020\006\uffe5\012\uffe5\016\063\017\064\020\066\021\061" +
    "\022\065\001\002\000\016\010\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\027\uffe9\030\uffe9\001\002\000\016\006\075\016\063" +
    "\017\064\020\066\021\061\022\065\001\002\000\022\006" +
    "\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\001\002\000\016\010\uffef\011\uffef\013\uffef\014" +
    "\uffef\027\uffef\030\uffef\001\002\000\012\002\ufff5\010\ufff5" +
    "\013\ufff5\014\ufff5\001\002\000\016\005\050\006\105\023" +
    "\012\024\013\025\011\030\054\001\002\000\014\005\050" +
    "\023\012\024\013\025\011\030\054\001\002\000\016\015" +
    "\103\016\063\017\064\020\066\021\061\022\065\001\002" +
    "\000\016\010\uffec\011\uffec\013\uffec\014\uffec\027\uffec\030" +
    "\uffec\001\002\000\006\006\107\012\070\001\002\000\004" +
    "\015\106\001\002\000\016\010\uffea\011\uffea\013\uffea\014" +
    "\uffea\027\uffea\030\uffea\001\002\000\004\015\110\001\002" +
    "\000\016\010\uffeb\011\uffeb\013\uffeb\014\uffeb\027\uffeb\030" +
    "\uffeb\001\002\000\010\010\021\013\016\014\017\001\002" +
    "\000\004\007\035\001\002\000\012\002\ufff7\010\ufff7\013" +
    "\ufff7\014\ufff7\001\002\000\004\030\115\001\002\000\006" +
    "\006\ufff4\012\ufff4\001\002\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\004\003\003\001\001\000\010\006" +
    "\022\024\021\025\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\007\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\022\024\021\025\115\001\001\000\004\023\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\026" +
    "\006\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\033\001\001" +
    "\000\002\001\001\000\010\006\041\020\040\021\036\001" +
    "\001\000\002\001\001\000\006\006\041\020\075\001\001" +
    "\000\010\004\051\010\052\013\050\001\001\000\002\001" +
    "\001\000\004\007\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\051\010\073\013\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\061\001\001\000" +
    "\002\001\001\000\012\004\051\010\057\011\055\013\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\061\001\001\000\002\001\001\000\010\004\051\010\066" +
    "\013\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\061\001\001" +
    "\000\010\004\051\010\071\013\050\001\001\000\002\001" +
    "\001\000\004\012\061\001\001\000\002\001\001\000\004" +
    "\012\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\051\010\057\011\103\013\050" +
    "\001\001\000\010\004\051\010\101\013\050\001\001\000" +
    "\004\012\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\113\001\001\000\004\022\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){

		report_error("Error de sintaxis en la linea " + s.left + " caracter " + s.right + "\n", 		null);

	}

	
	public void syntax_error(){

		report_error("Error no puede haber dos funciones principales en el programa ", null);

	}

	
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

		report_error("" , null);

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	
	
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= DEFINES PARTES 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Funciones> p = (ArrayList<Funciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Programa pr = new Programa(d,p); pr.imprime();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINES ::= define ident CTES DEFINES 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= "const"+"\n"+"\t"+i+"="+c+";"+"\n"+d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINES ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CTES ::= numeric_integer_const 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CTES ::= numeric_real_const 
            {
              String RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CTES ::= constlit 
            {
              String RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARTES ::= PART PARTES 
            {
              ArrayList<Funciones> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funciones p = (Funciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Funciones> ps = (ArrayList<Funciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ps.add(p); RESULT = ps;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARTES ::= PART 
            {
              ArrayList<Funciones> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funciones p = (Funciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArryList<Funciones> listaFun = new ArrayList<Funciones>(); listaFun.add(p); RESULT = listaFun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PART ::= TYPE RESTPART 
            {
              Funciones RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funciones rp = (Funciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		rp.setType(t); RESUTL = rp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RESTPART ::= ident aperturaParentesis LISTPARAM cierreParentesis BLQ 
            {
              Funciones RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Funciones fun = new Funciones(i,"(" + lp + ")",b); RESULT = fun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTPART ::= ident aperturaParentesis vvoid cierreParentesis BLQ 
            {
              Funciones RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Funciones fun = new Funciones(i,"()",b); RESULT = fun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLQ ::= aperturaLlaves SENTLIST cierreLlaves 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Elementos> s = (ArrayList<Elementos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Sentencia se = new Sentencia(s); RESULT = se;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTPARAM ::= LISTPARAM coma TYPE ident 
            {
              String RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=lp+i+": "+t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTPARAM ::= TYPE ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+": "+t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= vvoid 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= vint 
            {
              String RESULT =null;
		RESULT="INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= vfloat 
            {
              String RESULT =null;
		RESULT="REAL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTLIST ::= SENTLIST SENT 
            {
              ArrayList<Elementos> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Elementos> sl = (ArrayList<Elementos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elementos s = (Elementos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		sl.add(s); RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTLIST ::= SENT 
            {
              ArrayList<Elementos> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elementos s = (Elementos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArryList<Elementos> listaE = new ArrayList<Elementos>(); listaE.add(s); RESULT = listaE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= TYPE LID punto_coma 
            {
              Elementos RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pcoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Elementos e = new Elementos(lid + " : " + type + pcoma+"\n", false); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= ident igual EXP punto_coma 
            {
              Elementos RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pcoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Elementos e = new Elementos(i + " := " + exp + pcoma+"\n", false); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= ident aperturaParentesis LEXP cierreParentesis punto_coma 
            {
              Elementos RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Elementos e = new Elementos(i+ap+lexp+cp+pc+"\n", false); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= ident aperturaParentesis cierreParentesis punto_coma 
            {
              Elementos RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Elementos e = new Elementos(i+ap+cp+pc+"\n", false); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= vreturn EXP punto_coma 
            {
              Elementos RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Elementos e = new Elementos(exp+pc, true); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LID ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LID ::= LID coma ident 
            {
              String RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=lid+coma+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LEXP ::= EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=epx;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LEXP ::= LEXP coma EXP 
            {
              String RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=lexp+coma+exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP OP EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=exp1+op+exp2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= FACTOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP ::= mas 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP ::= menos 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=me;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP ::= mult 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=mu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP ::= diventera 
            {
              String RESULT =null;
		RESULT="mod";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= divreal 
            {
              String RESULT =null;
		RESULT="div";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= ident aperturaParentesis LEXP cierreParentesis 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lexp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=i+"("+lexp+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= ident aperturaParentesis cierreParentesis 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+ap+cp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= aperturaParentesis EXP cierreParentesis 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ap+exp+cp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= CTES 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
